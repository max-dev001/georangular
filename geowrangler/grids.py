# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/00_grids.ipynb (unless otherwise specified).

__all__ = ["SquareGridBoundary", "SquareGridGenerator"]

# Internal Cell
import logging
from typing import List, Tuple, Union

import numpy as np
from fastcore.basics import patch
from geopandas import GeoDataFrame
from pyproj import Transformer
from shapely.geometry import Polygon

logger = logging.getLogger(__name__)

# Cell


class SquareGridBoundary:
    """Reusing Boundary. x_min, y_min, x_max, and y_max are in the the target crs"""

    def __init__(self, x_min: float, y_min: float, x_max: float, y_max: float):
        self.x_min = x_min
        self.y_min = y_min
        self.x_max = x_max
        self.y_max = y_max

    def get_range_subset(
        self, x_min: float, y_min: float, x_max: float, y_max: float, cell_size: float
    ) -> Tuple[float, List[float], float, List[float]]:
        """Returns a subset of grids from the orginal boundary based on the boundary and a grid size"""
        xrange = np.arange(self.x_min, self.x_max, cell_size)
        yrange = np.arange(self.y_min, self.y_max, cell_size)
        x_mask = (xrange >= x_min) & (xrange <= x_max + cell_size)
        y_mask = (yrange >= y_min) & (yrange <= y_max + cell_size)
        x_idx_offset = np.nonzero(x_mask)[0][0]
        y_idx_offset = np.nonzero(x_mask)[0][0]
        return (
            x_idx_offset,
            xrange[x_mask],
            y_idx_offset,
            yrange[y_mask],
        )


# Cell


class SquareGridGenerator:
    def __init__(
        self,
        gdf: GeoDataFrame,  # a geodataframe to create grids from
        cell_size: float,  # height and width of a square cell in meters
        grid_projection: str = "EPSG:3857",  # projection of grid output
        boundary: Union[SquareGridBoundary, List[float]] = None,  # original boundary
    ):
        self.gdf = gdf
        self.cell_size = cell_size
        self.grid_projection = grid_projection
        self.boundary = boundary


# Cell


@patch
def create_cell(
    self: SquareGridGenerator,
    x: float,  # x coord of top left
    y: float,  # y coord of top left
) -> Polygon:
    """Create a square cell based on the top left coordinates and cell_size"""
    return Polygon(
        [
            (x, y),
            (x + self.cell_size, y),
            (x + self.cell_size, y + self.cell_size),
            (x, y + self.cell_size),
        ]
    )


# Cell


@patch
def generate_grid(self: SquareGridGenerator) -> GeoDataFrame:
    polygons = []
    reprojected_gdf = self.gdf.to_crs(self.grid_projection)
    if self.boundary is None:
        boundary = SquareGridBoundary(*reprojected_gdf.total_bounds)
    elif isinstance(self.boundary, SquareGridBoundary):
        boundary = self.boundary
    else:
        transformer = Transformer.from_crs(
            self.gdf.crs, reprojected_gdf.crs, always_xy=True
        )
        x_min, y_min = transformer.transform(self.boundary[0], self.boundary[1])
        x_max, y_max = transformer.transform(self.boundary[2], self.boundary[3])
        boundary = SquareGridBoundary(x_min, y_min, x_max, y_max)

    # TODO: Catch case where no geometries are within the boundary
    x_idx_offset, xrange, y_idx_offset, yrange = boundary.get_range_subset(
        *reprojected_gdf.total_bounds, cell_size=self.cell_size
    )
    for x_idx, x in enumerate(xrange):
        for y_idx, y in enumerate(yrange):
            polygons.append(
                {
                    "x": x_idx + x_idx_offset,
                    "y": y_idx + y_idx_offset,
                    "geometry": self.create_cell(x, y),
                }
            )

    dest = GeoDataFrame(polygons, geometry="geometry", crs=self.grid_projection)
    dest_reproject = dest.to_crs(self.gdf.crs)
    final = dest_reproject[dest_reproject.intersects(self.gdf.unary_union)]
    return final
